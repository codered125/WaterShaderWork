#pragma once
#if PIXELSHADER
	#define MaterialFloat half
	#define MaterialFloat2 half2
	#define MaterialFloat3 half3
	#define MaterialFloat4 half4
	#define MaterialFloat3x3 half3x3
	#define MaterialFloat4x4 half4x4 
	#define MaterialFloat4x3 half4x3 
#else
	// Material translated vertex shader code always uses floats, 
	// Because it's used for things like world position and UVs
	#define MaterialFloat float
	#define MaterialFloat2 float2
	#define MaterialFloat3 float3
	#define MaterialFloat4 float4
	#define MaterialFloat3x3 float3x3
	#define MaterialFloat4x4 float4x4 
	#define MaterialFloat4x3 float4x3 
#endif
struct TestingStructs
{
	MaterialFloat UE4Sine(MaterialFloat x)
	{
		MaterialFloat result = x * PI * 2;
		result = sin(result);
		return clamp(result, -1.f, 1.f);
	}

		MaterialFloat UE4Cos(MaterialFloat x)
	{
		MaterialFloat result = x * PI * 2;
		result = cos(result);
		return clamp(result, -1.f, 1.f);
	}
	
	float3 Wave(float2 direct, float inwaves, float2 inTexCoord, float inTime, float expo, float inheight)
	{
		const float dirAndWaves = dot(inTexCoord, direct) * inwaves;
		//Because ue4 sine is different to hlsl function
		const float applyTime = UE4Sine(dirAndWaves + inTime);
		const float normToRange = pow((applyTime +1) / 2 , expo);		
		return MaterialFloat3(0.0f, 0.0f, 1.0f) * normToRange * inheight;
	}

	float3 GerstnerFunNormal(int instance, float steepness)
	{
	float3 output;
	float w = (2 / Len ) * instance;
	float pC = speed * (2 / Len) * instance;
	//float dDotT = dot(dir, inTexCoord);
	float wa = w * height2;
	float Qi = steepness / (w * height2 * instance);
	float co = UE4Cos(w * dot(dir, float2(p.x, p.y)) + pC * Time2);
	float so = UE4Sine(w * dot(dir, float2(p.x, p.y)) + pC * Time2);
	output.x = -(dir.x *  wa * co);
	output.y = -(dir.y *  wa * co);
	output.z = 1 - (Qi * wa * so);
	return output;
	}

	float3 Main(float3 inp, float2 direct, float2 inTexCoord,  float inL,  float inTime, float speed, float inheight)
	{
		return  normalize(GerstnerFunNormal(4, 1.0));
	}

};

const static MaterialFloat PI = 3.1415926535897932f;
TestingStructs test;
return test.Main(p, dir, texcoord, Len, Time2, speed, height2);






