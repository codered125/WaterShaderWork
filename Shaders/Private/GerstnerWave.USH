#pragma once
#if PIXELSHADER
	#define MaterialFloat half
	#define MaterialFloat2 half2
	#define MaterialFloat3 half3
	#define MaterialFloat4 half4
	#define MaterialFloat3x3 half3x3
	#define MaterialFloat4x4 half4x4 
	#define MaterialFloat4x3 half4x3 
#else
	// Material translated vertex shader code always uses floats, 
	// Because it's used for things like world position and UVs
	#define MaterialFloat float
	#define MaterialFloat2 float2
	#define MaterialFloat3 float3
	#define MaterialFloat4 float4
	#define MaterialFloat3x3 float3x3
	#define MaterialFloat4x4 float4x4 
	#define MaterialFloat4x3 float4x3 
#endif
struct TestingStructs
{
	MaterialFloat UE4Sine(MaterialFloat x)
	{
		MaterialFloat result = x * PI * 2;
		result = sin(result);
		return clamp(result, -1.f, 1.f);
	}

		MaterialFloat UE4Cos(MaterialFloat x)
	{
		MaterialFloat result = x * PI * 2;
		result = cos(result);
		return clamp(result, -1.f, 1.f);
	}

	float3 GerstnerFunXY(int instance, float steepness)
	{
	float3 output;
	float w = ((2* PI) / Len ) * instance;
	float pC = speed * ((2* PI) / Len);
	//float dDotT = dot(dir, inTexCoord);
	float Qi = steepness / (w * height2);

	output.x = Qi * height2 * (dir.x * (UE4Cos(w * dot(dir, texcoord) + (pC * Time2))));
	output.y = Qi * height2 * (dir.y * (UE4Cos(w * dot(dir, texcoord) + (pC * Time2))));
	output.z = height2 * (UE4Sine(w * dot(dir, texcoord) + (pC * Time2)));
	return output;
	}

	float3 Main(float2 direct, float2 inTexCoord,  float inL,  float inTime, float speed, float inheight)
	{
	
		float3 output = GerstnerFunXY(1,  0.5);
		return output;
		//return float3(inTexCoord.x, inTexCoord.y, 0) + output;
	}

};

const static MaterialFloat PI = 3.1415926535897932f;
TestingStructs test;
return test.Main(dir, texcoord, Len, Time2, speed, height2);






